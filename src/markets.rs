// Generated market configuration for Hyperliquid
// This file contains all active perpetual markets as of the latest update

use std::collections::HashMap;

pub fn get_all_markets() -> HashMap<u32, String> {
    HashMap::from([
        (0, "BTC".to_string()),
        (1, "ETH".to_string()),
        (2, "ATOM".to_string()),
        (3, "MATIC".to_string()),
        (4, "DYDX".to_string()),
        (5, "SOL".to_string()),
        (6, "AVAX".to_string()),
        (7, "APE".to_string()),
        (8, "LTC".to_string()),
        (9, "DOGE".to_string()),
        (10, "BNB".to_string()),
        (11, "ARB".to_string()),
        (12, "SUI".to_string()),
        (13, "OP".to_string()),
        (14, "APT".to_string()),
        (15, "RDNT".to_string()),
        (16, "FTM".to_string()),
        (17, "INJ".to_string()),
        (18, "ORDI".to_string()),
        (19, "STX".to_string()),
        (20, "SHIB".to_string()),
        (21, "BLUR".to_string()),
        (22, "XRP".to_string()),
        (23, "NEAR".to_string()),
        (24, "GALA".to_string()),
        (25, "LINK".to_string()),
        (26, "OX".to_string()),
        (27, "RNDR".to_string()),
        (28, "HIFI".to_string()),
        (29, "SAND".to_string()),
        (30, "MANA".to_string()),
        (31, "TRX".to_string()),
        (32, "SNX".to_string()),
        (33, "UNI".to_string()),
        (34, "CRV".to_string()),
        (35, "MKR".to_string()),
        (36, "COMP".to_string()),
        (37, "MEME".to_string()),
        (38, "ADA".to_string()),
        (39, "DOT".to_string()),
        (40, "FIL".to_string()),
        (41, "ICP".to_string()),
        (42, "IMX".to_string()),
        (43, "SEI".to_string()),
        (44, "TIA".to_string()),
        (45, "FRIEND".to_string()),
        (46, "1000SATS".to_string()),
        (47, "JTO".to_string()),
        (48, "BONK".to_string()),
        (49, "ACE".to_string()),
        (50, "PYTH".to_string()),
        (51, "NFP".to_string()),
        (52, "AI".to_string()),
        (53, "XAI".to_string()),
        (54, "MANTA".to_string()),
        (55, "ALT".to_string()),
        (56, "JUP".to_string()),
        (57, "ZETA".to_string()),
        (58, "STRK".to_string()),
        (59, "DYM".to_string()),
        (60, "PIXEL".to_string()),
        (61, "WLD".to_string()),
        (62, "TRB".to_string()),
        (63, "PORTAL".to_string()),
        (64, "PDA".to_string()),
        (65, "AXL".to_string()),
        (66, "MYRO".to_string()),
        (67, "METIS".to_string()),
        (68, "AEVO".to_string()),
        (69, "BOME".to_string()),
        (70, "ETHFI".to_string()),
        (71, "SLERF".to_string()),
        (72, "W".to_string()),
        (73, "ENA".to_string()),
        (74, "PAC".to_string()),
        (75, "TNSR".to_string()),
        (76, "OMNI".to_string()),
        (77, "MERL".to_string()),
        (78, "ORBS".to_string()),
        (79, "POPCAT".to_string()),
        (80, "REZ".to_string()),
        (81, "KMNO".to_string()),
        (82, "SAFE".to_string()),
        (83, "SAGA".to_string()),
        (84, "TAO".to_string()),
        (85, "BRETT".to_string()),
        (86, "ZK".to_string()),
        (87, "IO".to_string()),
        (88, "ZRO".to_string()),
        (89, "BLAST".to_string()),
        (90, "AAVE".to_string()),
        (91, "ENS".to_string()),
        (92, "EIGEN".to_string()),
        (93, "MEW".to_string()),
        (94, "DOG".to_string()),
        (95, "NOT".to_string()),
        (96, "PEPE".to_string()),
        (97, "PEOPLE".to_string()),
        (98, "WIF".to_string()),
        (99, "BAKE".to_string()),
        (100, "MOG".to_string()),
        (101, "MNT".to_string()),
        (102, "ASTR".to_string()),
        (103, "FET".to_string()),
        (104, "RUNE".to_string()),
        (105, "PRIME".to_string()),
        (106, "AERO".to_string()),
        (107, "HOOK".to_string()),
        (108, "ONDO".to_string()),
        (109, "ZEX".to_string()),
        (110, "H2O".to_string()),
        (111, "POL".to_string()),
        (112, "BANANA".to_string()),
        (113, "SUN".to_string()),
        (114, "PUFFER".to_string()),
        (115, "REEF".to_string()),
        (116, "VADER".to_string()),
        (117, "GIGA".to_string()),
        (118, "DRIFT".to_string()),
        (119, "GRASS".to_string()),
        (120, "CATI".to_string()),
        (121, "DBR".to_string()),
        (122, "HMSTR".to_string()),
        (123, "DOGS".to_string()),
        (124, "EIGEN2".to_string()),
        (125, "NEIRO".to_string()),
        (126, "TURBO".to_string()),
        (127, "BNSOL".to_string()),
        (128, "1MBABYDOGE".to_string()),
        (129, "MOODENG".to_string()),
        (130, "GOAT".to_string()),
        (131, "MEMEFI".to_string()),
        (132, "PONKE".to_string()),
        (133, "FTT".to_string()),
        (134, "PNUT".to_string()),
        (135, "ACT".to_string()),
        (136, "HIPPOP".to_string()),
        (137, "CHILLGUY".to_string()),
        (138, "SLERF2".to_string()),
        (139, "FARTCOIN".to_string()),
        (140, "VIRTUAL".to_string()),
        (141, "ANON".to_string()),
        (142, "MAJOR".to_string()),
        (143, "MANEKI".to_string()),
        (144, "SWARM".to_string()),
        (145, "CUTO".to_string()),
        (146, "WHY".to_string()),
        (147, "VINE".to_string()),
        (148, "G".to_string()),
        (149, "UBC".to_string()),
        (150, "ALCH".to_string()),
        (151, "AIXCB".to_string()),
        (152, "COOKIE".to_string()),
        (153, "CGPT".to_string()),
        (154, "ZEREBRO".to_string()),
        (155, "MICE".to_string()),
        (156, "PVP".to_string()),
        (157, "BUZZ".to_string()),
        (158, "SORA".to_string()),
        (159, "HYPE".to_string()),
        (160, "REX".to_string()),
        (161, "ME".to_string()),
        (162, "PENGU".to_string()),
        (163, "MOVE".to_string()),
        (164, "USUAL".to_string()),
        (165, "FUEL".to_string()),
        (166, "VANA".to_string()),
        (167, "AVA".to_string()),
        (168, "LBR".to_string()),
        (169, "ORDER".to_string()),
        (170, "SONIC".to_string()),
        (171, "MOZ".to_string()),
        (172, "WZRD".to_string()),
        (173, "GRIFFAIN".to_string()),
        (174, "AMC".to_string()),
        (175, "SEIYAN".to_string()),
        (176, "HPOS10I".to_string()),
        (177, "LESTER".to_string()),
        (178, "GME".to_string()),
        (179, "SPX".to_string()),
        (180, "MOO".to_string()),
        (181, "TON".to_string()),
        (182, "NEIROCTO".to_string()),
        (183, "1000BEER".to_string()),
        (184, "LOCKIN".to_string()),
        (185, "ATH".to_string()),
        (186, "PUPS".to_string()),
        (187, "BUCK".to_string()),
        (188, "BOBER".to_string()),
        (189, "SUNDOG".to_string()),
        (190, "SHRUB".to_string()),
        (191, "NEIROETH".to_string()),
        (192, "SWAG".to_string()),
        (193, "RETARDIO".to_string()),
        (194, "WIBWOB".to_string()),
        (195, "BABYPENGU".to_string()),
        (196, "BILLYSOL".to_string()),
        (197, "FWOG".to_string()),
        (198, "BUB".to_string()),
    ])
}

pub fn get_market_id(coin: &str) -> Option<u32> {
    // This is a reverse lookup - not efficient for many lookups
    // Consider creating a reverse HashMap if needed frequently
    get_all_markets()
        .iter()
        .find(|(_, symbol)| symbol.as_str() == coin)
        .map(|(id, _)| *id)
}

pub fn get_market_symbol(id: u32) -> Option<String> {
    get_all_markets().get(&id).cloned()
}